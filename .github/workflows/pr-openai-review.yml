name: Gemini PR Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai requests
          
      - name: Get file differences
        id: file_changes
        run: |
          echo "Fetching changed files..."
          git fetch origin
          git diff --name-only origin/${{ github.event.pull_request.base.ref }} > changed_files.txt
          
      - name: Debug changed files
        run: cat changed_files.txt
        
      - name: Generate and post reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          cat > review.py << 'EOF'
          import os
          import json
          import requests
          import google.generativeai as genai
          
          # Setup Gemini API
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-1.5-pro')
          
          # GitHub API setup
          github_token = os.environ['GITHUB_TOKEN']
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['REPO']
          github_api_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/comments"
          headers = {
              "Authorization": f"Bearer {github_token}",
              "Accept": "application/vnd.github.v3+json"
          }
          
          # Get changed files
          with open('changed_files.txt', 'r') as f:
              changed_files = [line.strip() for line in f.readlines() if line.strip()]
          
          # For each changed file
          for file_path in changed_files:
              try:
                  print(f"Processing {file_path}...")

                  # Skip non-code files
                  file_extension = os.path.splitext(file_path)[1].lower()
                  allowed_extensions = ['.py', '.js', '.jsx', '.ts', '.tsx', '.java', '.c', '.cpp', '.h', '.go', '.rb', '.php', '.html', '.css', '.yml', '.yaml', '.json', '.md', '.rs', '.swift']
                  if file_extension not in allowed_extensions:
                      print(f"Skipping {file_path} (not a code file).")
                      continue
                  
                  # Get file diff
                  diff_output = os.popen(f"git diff origin/${{ github.event.pull_request.base.ref }} -- {file_path}").read().strip()
                  
                  if not diff_output:
                      print(f"No diff found for {file_path}, skipping...")
                      continue
                  
                  # Get the file content
                  with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                      try:
                          file_content = file.read()
                      except Exception as e:
                          print(f"Error reading {file_path}: {e}")
                          continue
                  
                  # Generate review with Gemini
                  prompt = f"""
                  You are an expert code reviewer. Please review the following code changes 
                  and provide constructive feedback. Focus on:
                  1. Potential bugs or issues
                  2. Performance improvements
                  3. Security concerns
                  4. Code style and best practices

                  Only provide a structured JSON response in this format:
                  {{
                      "overall_assessment": "Summary here",
                      "suggestions": [
                          {{"line_number": 42, "comment": "Consider using a more efficient algorithm here."}}
                      ]
                  }}

                  ### Full File Content:
                  ```
                  {file_content[:10000]}
                  ```

                  ### Code Diff:
                  ```
                  {diff_output[:5000]}
                  ```
                  """
                  
                  response = model.generate_content(prompt)
                  review_text = response.text.strip()

                  print(f"Gemini API Response: {review_text[:500]}")  # Debug first 500 chars

                  # Try parsing JSON response
                  try:
                      review_data = json.loads(review_text)

                      # Post overall assessment as a PR comment
                      if "overall_assessment" in review_data:
                          pr_comment_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
                          comment_data = {
                              "body": f"## Gemini Review for `{file_path}`\n\n{review_data['overall_assessment']}"
                          }
                          requests.post(pr_comment_url, headers=headers, json=comment_data)

                      # Post line-specific comments
                      if "suggestions" in review_data and isinstance(review_data["suggestions"], list):
                          for suggestion in review_data["suggestions"]:
                              line_number = suggestion.get("line_number")
                              comment = suggestion.get("comment")

                              if line_number and comment:
                                  comment_data = {
                                      "body": comment,
                                      "commit_id": os.environ['GITHUB_SHA'],
                                      "path": file_path,
                                      "line": line_number,
                                      "side": "RIGHT"
                                  }
                                  requests.post(github_api_url, headers=headers, json=comment_data)

                  except json.JSONDecodeError:
                      print(f"Error parsing Gemini response for {file_path}. Posting raw response.")
                      comment_data = {
                          "body": f"## Gemini Review for `{file_path}`\n\n{review_text}"
                      }
                      pr_comment_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
                      requests.post(pr_comment_url, headers=headers, json=comment_data)
                          
              except Exception as e:
                  print(f"Error processing {file_path}: {e}")
          EOF
          
          python review.py
